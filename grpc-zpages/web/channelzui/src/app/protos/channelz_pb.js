/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.exportSymbol('proto.grpc.channelz.v1.Address', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Address.OtherAddress', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Address.TcpIpAddress', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Address.UdsAddress', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Channel', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelConnectivityState', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelConnectivityState.State', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelData', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelRef', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelTrace', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelTraceEvent', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ChannelTraceEvent.Severity', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetChannelRequest', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetChannelResponse', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetServerSocketsRequest', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetServerSocketsResponse', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetServersRequest', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetServersResponse', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetSocketRequest', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetSocketResponse', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetSubchannelRequest', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetSubchannelResponse', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetTopChannelsRequest', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.GetTopChannelsResponse', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Security', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Security.OtherSecurity', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Security.Tls', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Server', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ServerData', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.ServerRef', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Socket', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SocketData', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SocketOption', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SocketOptionLinger', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SocketOptionTcpInfo', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SocketOptionTimeout', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SocketRef', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.Subchannel', null, global);
goog.exportSymbol('proto.grpc.channelz.v1.SubchannelRef', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Channel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.Channel.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.Channel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Channel.displayName = 'proto.grpc.channelz.v1.Channel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.Channel.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Channel.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Channel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Channel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Channel.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.grpc.channelz.v1.ChannelRef.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.grpc.channelz.v1.ChannelData.toObject(includeInstance, f),
    channelRefList: jspb.Message.toObjectList(msg.getChannelRefList(),
    proto.grpc.channelz.v1.ChannelRef.toObject, includeInstance),
    subchannelRefList: jspb.Message.toObjectList(msg.getSubchannelRefList(),
    proto.grpc.channelz.v1.SubchannelRef.toObject, includeInstance),
    socketRefList: jspb.Message.toObjectList(msg.getSocketRefList(),
    proto.grpc.channelz.v1.SocketRef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Channel}
 */
proto.grpc.channelz.v1.Channel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Channel;
  return proto.grpc.channelz.v1.Channel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Channel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Channel}
 */
proto.grpc.channelz.v1.Channel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.ChannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelRef.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new proto.grpc.channelz.v1.ChannelData;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.ChannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelRef.deserializeBinaryFromReader);
      msg.addChannelRef(value);
      break;
    case 4:
      var value = new proto.grpc.channelz.v1.SubchannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SubchannelRef.deserializeBinaryFromReader);
      msg.addSubchannelRef(value);
      break;
    case 5:
      var value = new proto.grpc.channelz.v1.SocketRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader);
      msg.addSocketRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Channel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Channel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Channel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Channel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.ChannelRef.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.channelz.v1.ChannelData.serializeBinaryToWriter
    );
  }
  f = message.getChannelRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.grpc.channelz.v1.ChannelRef.serializeBinaryToWriter
    );
  }
  f = message.getSubchannelRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.grpc.channelz.v1.SubchannelRef.serializeBinaryToWriter
    );
  }
  f = message.getSocketRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelRef ref = 1;
 * @return {?proto.grpc.channelz.v1.ChannelRef}
 */
proto.grpc.channelz.v1.Channel.prototype.getRef = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelRef} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelRef, 1));
};


/** @param {?proto.grpc.channelz.v1.ChannelRef|undefined} value */
proto.grpc.channelz.v1.Channel.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.Channel.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Channel.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelData data = 2;
 * @return {?proto.grpc.channelz.v1.ChannelData}
 */
proto.grpc.channelz.v1.Channel.prototype.getData = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelData} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelData, 2));
};


/** @param {?proto.grpc.channelz.v1.ChannelData|undefined} value */
proto.grpc.channelz.v1.Channel.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.Channel.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Channel.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChannelRef channel_ref = 3;
 * @return {!Array.<!proto.grpc.channelz.v1.ChannelRef>}
 */
proto.grpc.channelz.v1.Channel.prototype.getChannelRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.ChannelRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.ChannelRef, 3));
};


/** @param {!Array.<!proto.grpc.channelz.v1.ChannelRef>} value */
proto.grpc.channelz.v1.Channel.prototype.setChannelRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grpc.channelz.v1.ChannelRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.ChannelRef}
 */
proto.grpc.channelz.v1.Channel.prototype.addChannelRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grpc.channelz.v1.ChannelRef, opt_index);
};


proto.grpc.channelz.v1.Channel.prototype.clearChannelRefList = function() {
  this.setChannelRefList([]);
};


/**
 * repeated SubchannelRef subchannel_ref = 4;
 * @return {!Array.<!proto.grpc.channelz.v1.SubchannelRef>}
 */
proto.grpc.channelz.v1.Channel.prototype.getSubchannelRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SubchannelRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SubchannelRef, 4));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SubchannelRef>} value */
proto.grpc.channelz.v1.Channel.prototype.setSubchannelRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SubchannelRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SubchannelRef}
 */
proto.grpc.channelz.v1.Channel.prototype.addSubchannelRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.grpc.channelz.v1.SubchannelRef, opt_index);
};


proto.grpc.channelz.v1.Channel.prototype.clearSubchannelRefList = function() {
  this.setSubchannelRefList([]);
};


/**
 * repeated SocketRef socket_ref = 5;
 * @return {!Array.<!proto.grpc.channelz.v1.SocketRef>}
 */
proto.grpc.channelz.v1.Channel.prototype.getSocketRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SocketRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SocketRef, 5));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SocketRef>} value */
proto.grpc.channelz.v1.Channel.prototype.setSocketRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SocketRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.Channel.prototype.addSocketRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.grpc.channelz.v1.SocketRef, opt_index);
};


proto.grpc.channelz.v1.Channel.prototype.clearSocketRefList = function() {
  this.setSocketRefList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Subchannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.Subchannel.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.Subchannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Subchannel.displayName = 'proto.grpc.channelz.v1.Subchannel';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.Subchannel.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Subchannel.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Subchannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Subchannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Subchannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.grpc.channelz.v1.SubchannelRef.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.grpc.channelz.v1.ChannelData.toObject(includeInstance, f),
    channelRefList: jspb.Message.toObjectList(msg.getChannelRefList(),
    proto.grpc.channelz.v1.ChannelRef.toObject, includeInstance),
    subchannelRefList: jspb.Message.toObjectList(msg.getSubchannelRefList(),
    proto.grpc.channelz.v1.SubchannelRef.toObject, includeInstance),
    socketRefList: jspb.Message.toObjectList(msg.getSocketRefList(),
    proto.grpc.channelz.v1.SocketRef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Subchannel}
 */
proto.grpc.channelz.v1.Subchannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Subchannel;
  return proto.grpc.channelz.v1.Subchannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Subchannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Subchannel}
 */
proto.grpc.channelz.v1.Subchannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.SubchannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SubchannelRef.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new proto.grpc.channelz.v1.ChannelData;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.ChannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelRef.deserializeBinaryFromReader);
      msg.addChannelRef(value);
      break;
    case 4:
      var value = new proto.grpc.channelz.v1.SubchannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SubchannelRef.deserializeBinaryFromReader);
      msg.addSubchannelRef(value);
      break;
    case 5:
      var value = new proto.grpc.channelz.v1.SocketRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader);
      msg.addSocketRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Subchannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Subchannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Subchannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Subchannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.SubchannelRef.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.channelz.v1.ChannelData.serializeBinaryToWriter
    );
  }
  f = message.getChannelRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.grpc.channelz.v1.ChannelRef.serializeBinaryToWriter
    );
  }
  f = message.getSubchannelRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.grpc.channelz.v1.SubchannelRef.serializeBinaryToWriter
    );
  }
  f = message.getSocketRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubchannelRef ref = 1;
 * @return {?proto.grpc.channelz.v1.SubchannelRef}
 */
proto.grpc.channelz.v1.Subchannel.prototype.getRef = function() {
  return /** @type{?proto.grpc.channelz.v1.SubchannelRef} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.SubchannelRef, 1));
};


/** @param {?proto.grpc.channelz.v1.SubchannelRef|undefined} value */
proto.grpc.channelz.v1.Subchannel.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.Subchannel.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Subchannel.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChannelData data = 2;
 * @return {?proto.grpc.channelz.v1.ChannelData}
 */
proto.grpc.channelz.v1.Subchannel.prototype.getData = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelData} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelData, 2));
};


/** @param {?proto.grpc.channelz.v1.ChannelData|undefined} value */
proto.grpc.channelz.v1.Subchannel.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.Subchannel.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Subchannel.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChannelRef channel_ref = 3;
 * @return {!Array.<!proto.grpc.channelz.v1.ChannelRef>}
 */
proto.grpc.channelz.v1.Subchannel.prototype.getChannelRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.ChannelRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.ChannelRef, 3));
};


/** @param {!Array.<!proto.grpc.channelz.v1.ChannelRef>} value */
proto.grpc.channelz.v1.Subchannel.prototype.setChannelRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grpc.channelz.v1.ChannelRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.ChannelRef}
 */
proto.grpc.channelz.v1.Subchannel.prototype.addChannelRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grpc.channelz.v1.ChannelRef, opt_index);
};


proto.grpc.channelz.v1.Subchannel.prototype.clearChannelRefList = function() {
  this.setChannelRefList([]);
};


/**
 * repeated SubchannelRef subchannel_ref = 4;
 * @return {!Array.<!proto.grpc.channelz.v1.SubchannelRef>}
 */
proto.grpc.channelz.v1.Subchannel.prototype.getSubchannelRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SubchannelRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SubchannelRef, 4));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SubchannelRef>} value */
proto.grpc.channelz.v1.Subchannel.prototype.setSubchannelRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SubchannelRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SubchannelRef}
 */
proto.grpc.channelz.v1.Subchannel.prototype.addSubchannelRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.grpc.channelz.v1.SubchannelRef, opt_index);
};


proto.grpc.channelz.v1.Subchannel.prototype.clearSubchannelRefList = function() {
  this.setSubchannelRefList([]);
};


/**
 * repeated SocketRef socket_ref = 5;
 * @return {!Array.<!proto.grpc.channelz.v1.SocketRef>}
 */
proto.grpc.channelz.v1.Subchannel.prototype.getSocketRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SocketRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SocketRef, 5));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SocketRef>} value */
proto.grpc.channelz.v1.Subchannel.prototype.setSocketRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SocketRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.Subchannel.prototype.addSocketRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.grpc.channelz.v1.SocketRef, opt_index);
};


proto.grpc.channelz.v1.Subchannel.prototype.clearSocketRefList = function() {
  this.setSocketRefList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ChannelConnectivityState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.ChannelConnectivityState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ChannelConnectivityState.displayName = 'proto.grpc.channelz.v1.ChannelConnectivityState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ChannelConnectivityState.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ChannelConnectivityState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ChannelConnectivityState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelConnectivityState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ChannelConnectivityState}
 */
proto.grpc.channelz.v1.ChannelConnectivityState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ChannelConnectivityState;
  return proto.grpc.channelz.v1.ChannelConnectivityState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ChannelConnectivityState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ChannelConnectivityState}
 */
proto.grpc.channelz.v1.ChannelConnectivityState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.channelz.v1.ChannelConnectivityState.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ChannelConnectivityState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ChannelConnectivityState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ChannelConnectivityState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelConnectivityState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.grpc.channelz.v1.ChannelConnectivityState.State = {
  UNKNOWN: 0,
  IDLE: 1,
  CONNECTING: 2,
  READY: 3,
  TRANSIENT_FAILURE: 4,
  SHUTDOWN: 5
};

/**
 * optional State state = 1;
 * @return {!proto.grpc.channelz.v1.ChannelConnectivityState.State}
 */
proto.grpc.channelz.v1.ChannelConnectivityState.prototype.getState = function() {
  return /** @type {!proto.grpc.channelz.v1.ChannelConnectivityState.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.grpc.channelz.v1.ChannelConnectivityState.State} value */
proto.grpc.channelz.v1.ChannelConnectivityState.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ChannelData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.ChannelData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ChannelData.displayName = 'proto.grpc.channelz.v1.ChannelData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ChannelData.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ChannelData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ChannelData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelData.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.grpc.channelz.v1.ChannelConnectivityState.toObject(includeInstance, f),
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trace: (f = msg.getTrace()) && proto.grpc.channelz.v1.ChannelTrace.toObject(includeInstance, f),
    callsStarted: jspb.Message.getFieldWithDefault(msg, 4, 0),
    callsSucceeded: jspb.Message.getFieldWithDefault(msg, 5, 0),
    callsFailed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastCallStartedTimestamp: (f = msg.getLastCallStartedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ChannelData}
 */
proto.grpc.channelz.v1.ChannelData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ChannelData;
  return proto.grpc.channelz.v1.ChannelData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ChannelData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ChannelData}
 */
proto.grpc.channelz.v1.ChannelData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.ChannelConnectivityState;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelConnectivityState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.ChannelTrace;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelTrace.deserializeBinaryFromReader);
      msg.setTrace(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallsStarted(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallsSucceeded(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallsFailed(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastCallStartedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ChannelData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ChannelData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ChannelData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.ChannelConnectivityState.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrace();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.channelz.v1.ChannelTrace.serializeBinaryToWriter
    );
  }
  f = message.getCallsStarted();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCallsSucceeded();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCallsFailed();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLastCallStartedTimestamp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelConnectivityState state = 1;
 * @return {?proto.grpc.channelz.v1.ChannelConnectivityState}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getState = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelConnectivityState} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelConnectivityState, 1));
};


/** @param {?proto.grpc.channelz.v1.ChannelConnectivityState|undefined} value */
proto.grpc.channelz.v1.ChannelData.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.ChannelData.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelData.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string target = 2;
 * @return {string}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.ChannelData.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChannelTrace trace = 3;
 * @return {?proto.grpc.channelz.v1.ChannelTrace}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getTrace = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelTrace} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelTrace, 3));
};


/** @param {?proto.grpc.channelz.v1.ChannelTrace|undefined} value */
proto.grpc.channelz.v1.ChannelData.prototype.setTrace = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.grpc.channelz.v1.ChannelData.prototype.clearTrace = function() {
  this.setTrace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelData.prototype.hasTrace = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 calls_started = 4;
 * @return {number}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getCallsStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ChannelData.prototype.setCallsStarted = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 calls_succeeded = 5;
 * @return {number}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getCallsSucceeded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ChannelData.prototype.setCallsSucceeded = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 calls_failed = 6;
 * @return {number}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getCallsFailed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ChannelData.prototype.setCallsFailed = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp last_call_started_timestamp = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.ChannelData.prototype.getLastCallStartedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.ChannelData.prototype.setLastCallStartedTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.grpc.channelz.v1.ChannelData.prototype.clearLastCallStartedTimestamp = function() {
  this.setLastCallStartedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelData.prototype.hasLastCallStartedTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ChannelTraceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.channelz.v1.ChannelTraceEvent.oneofGroups_);
};
goog.inherits(proto.grpc.channelz.v1.ChannelTraceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ChannelTraceEvent.displayName = 'proto.grpc.channelz.v1.ChannelTraceEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.channelz.v1.ChannelTraceEvent.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.ChildRefCase = {
  CHILD_REF_NOT_SET: 0,
  CHANNEL_REF: 4,
  SUBCHANNEL_REF: 5
};

/**
 * @return {proto.grpc.channelz.v1.ChannelTraceEvent.ChildRefCase}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.getChildRefCase = function() {
  return /** @type {proto.grpc.channelz.v1.ChannelTraceEvent.ChildRefCase} */(jspb.Message.computeOneofCase(this, proto.grpc.channelz.v1.ChannelTraceEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ChannelTraceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ChannelTraceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelTraceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    severity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    channelRef: (f = msg.getChannelRef()) && proto.grpc.channelz.v1.ChannelRef.toObject(includeInstance, f),
    subchannelRef: (f = msg.getSubchannelRef()) && proto.grpc.channelz.v1.SubchannelRef.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ChannelTraceEvent}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ChannelTraceEvent;
  return proto.grpc.channelz.v1.ChannelTraceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ChannelTraceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ChannelTraceEvent}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.grpc.channelz.v1.ChannelTraceEvent.Severity} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new proto.grpc.channelz.v1.ChannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelRef.deserializeBinaryFromReader);
      msg.setChannelRef(value);
      break;
    case 5:
      var value = new proto.grpc.channelz.v1.SubchannelRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SubchannelRef.deserializeBinaryFromReader);
      msg.setSubchannelRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ChannelTraceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ChannelTraceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelTraceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getChannelRef();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.grpc.channelz.v1.ChannelRef.serializeBinaryToWriter
    );
  }
  f = message.getSubchannelRef();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.grpc.channelz.v1.SubchannelRef.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.Severity = {
  CT_UNKNOWN: 0,
  CT_INFO: 1,
  CT_WARNING: 2,
  CT_ERROR: 3
};

/**
 * optional string description = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Severity severity = 2;
 * @return {!proto.grpc.channelz.v1.ChannelTraceEvent.Severity}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.getSeverity = function() {
  return /** @type {!proto.grpc.channelz.v1.ChannelTraceEvent.Severity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.grpc.channelz.v1.ChannelTraceEvent.Severity} value */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.setSeverity = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.grpc.channelz.v1.ChannelTraceEvent.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChannelRef channel_ref = 4;
 * @return {?proto.grpc.channelz.v1.ChannelRef}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.getChannelRef = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelRef} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelRef, 4));
};


/** @param {?proto.grpc.channelz.v1.ChannelRef|undefined} value */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.setChannelRef = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.grpc.channelz.v1.ChannelTraceEvent.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.ChannelTraceEvent.prototype.clearChannelRef = function() {
  this.setChannelRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.hasChannelRef = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SubchannelRef subchannel_ref = 5;
 * @return {?proto.grpc.channelz.v1.SubchannelRef}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.getSubchannelRef = function() {
  return /** @type{?proto.grpc.channelz.v1.SubchannelRef} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.SubchannelRef, 5));
};


/** @param {?proto.grpc.channelz.v1.SubchannelRef|undefined} value */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.setSubchannelRef = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.grpc.channelz.v1.ChannelTraceEvent.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.ChannelTraceEvent.prototype.clearSubchannelRef = function() {
  this.setSubchannelRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelTraceEvent.prototype.hasSubchannelRef = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ChannelTrace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.ChannelTrace.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.ChannelTrace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ChannelTrace.displayName = 'proto.grpc.channelz.v1.ChannelTrace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.ChannelTrace.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ChannelTrace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ChannelTrace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelTrace.toObject = function(includeInstance, msg) {
  var f, obj = {
    numEventsLogged: jspb.Message.getFieldWithDefault(msg, 1, 0),
    creationTimestamp: (f = msg.getCreationTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.grpc.channelz.v1.ChannelTraceEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ChannelTrace}
 */
proto.grpc.channelz.v1.ChannelTrace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ChannelTrace;
  return proto.grpc.channelz.v1.ChannelTrace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ChannelTrace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ChannelTrace}
 */
proto.grpc.channelz.v1.ChannelTrace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumEventsLogged(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreationTimestamp(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.ChannelTraceEvent;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelTraceEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ChannelTrace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ChannelTrace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelTrace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumEventsLogged();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCreationTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.grpc.channelz.v1.ChannelTraceEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 num_events_logged = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.getNumEventsLogged = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ChannelTrace.prototype.setNumEventsLogged = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp creation_timestamp = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.getCreationTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.ChannelTrace.prototype.setCreationTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.ChannelTrace.prototype.clearCreationTimestamp = function() {
  this.setCreationTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.hasCreationTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChannelTraceEvent events = 3;
 * @return {!Array.<!proto.grpc.channelz.v1.ChannelTraceEvent>}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.ChannelTraceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.ChannelTraceEvent, 3));
};


/** @param {!Array.<!proto.grpc.channelz.v1.ChannelTraceEvent>} value */
proto.grpc.channelz.v1.ChannelTrace.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grpc.channelz.v1.ChannelTraceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.ChannelTraceEvent}
 */
proto.grpc.channelz.v1.ChannelTrace.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grpc.channelz.v1.ChannelTraceEvent, opt_index);
};


proto.grpc.channelz.v1.ChannelTrace.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ChannelRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.ChannelRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ChannelRef.displayName = 'proto.grpc.channelz.v1.ChannelRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ChannelRef.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ChannelRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ChannelRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ChannelRef}
 */
proto.grpc.channelz.v1.ChannelRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ChannelRef;
  return proto.grpc.channelz.v1.ChannelRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ChannelRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ChannelRef}
 */
proto.grpc.channelz.v1.ChannelRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ChannelRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ChannelRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ChannelRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ChannelRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 channel_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.ChannelRef.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ChannelRef.prototype.setChannelId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.grpc.channelz.v1.ChannelRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.ChannelRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SubchannelRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.SubchannelRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SubchannelRef.displayName = 'proto.grpc.channelz.v1.SubchannelRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SubchannelRef.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SubchannelRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SubchannelRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SubchannelRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchannelId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    name: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SubchannelRef}
 */
proto.grpc.channelz.v1.SubchannelRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SubchannelRef;
  return proto.grpc.channelz.v1.SubchannelRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SubchannelRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SubchannelRef}
 */
proto.grpc.channelz.v1.SubchannelRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSubchannelId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SubchannelRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SubchannelRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SubchannelRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SubchannelRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchannelId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int64 subchannel_id = 7;
 * @return {number}
 */
proto.grpc.channelz.v1.SubchannelRef.prototype.getSubchannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SubchannelRef.prototype.setSubchannelId = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string name = 8;
 * @return {string}
 */
proto.grpc.channelz.v1.SubchannelRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.SubchannelRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SocketRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.SocketRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SocketRef.displayName = 'proto.grpc.channelz.v1.SocketRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SocketRef.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SocketRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SocketRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.SocketRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SocketRef;
  return proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SocketRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSocketId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SocketRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SocketRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 socket_id = 3;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketRef.prototype.getSocketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketRef.prototype.setSocketId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.grpc.channelz.v1.SocketRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.SocketRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ServerRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.ServerRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ServerRef.displayName = 'proto.grpc.channelz.v1.ServerRef';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ServerRef.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ServerRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ServerRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ServerRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    name: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ServerRef}
 */
proto.grpc.channelz.v1.ServerRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ServerRef;
  return proto.grpc.channelz.v1.ServerRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ServerRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ServerRef}
 */
proto.grpc.channelz.v1.ServerRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ServerRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ServerRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ServerRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ServerRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int64 server_id = 5;
 * @return {number}
 */
proto.grpc.channelz.v1.ServerRef.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ServerRef.prototype.setServerId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.grpc.channelz.v1.ServerRef.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.ServerRef.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Server = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.Server.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.Server, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Server.displayName = 'proto.grpc.channelz.v1.Server';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.Server.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Server.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Server.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Server} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Server.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.grpc.channelz.v1.ServerRef.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.grpc.channelz.v1.ServerData.toObject(includeInstance, f),
    listenSocketList: jspb.Message.toObjectList(msg.getListenSocketList(),
    proto.grpc.channelz.v1.SocketRef.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Server}
 */
proto.grpc.channelz.v1.Server.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Server;
  return proto.grpc.channelz.v1.Server.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Server} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Server}
 */
proto.grpc.channelz.v1.Server.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.ServerRef;
      reader.readMessage(value,proto.grpc.channelz.v1.ServerRef.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new proto.grpc.channelz.v1.ServerData;
      reader.readMessage(value,proto.grpc.channelz.v1.ServerData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.SocketRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader);
      msg.addListenSocket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Server.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Server.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Server} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Server.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.ServerRef.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.channelz.v1.ServerData.serializeBinaryToWriter
    );
  }
  f = message.getListenSocketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter
    );
  }
};


/**
 * optional ServerRef ref = 1;
 * @return {?proto.grpc.channelz.v1.ServerRef}
 */
proto.grpc.channelz.v1.Server.prototype.getRef = function() {
  return /** @type{?proto.grpc.channelz.v1.ServerRef} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ServerRef, 1));
};


/** @param {?proto.grpc.channelz.v1.ServerRef|undefined} value */
proto.grpc.channelz.v1.Server.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.Server.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Server.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ServerData data = 2;
 * @return {?proto.grpc.channelz.v1.ServerData}
 */
proto.grpc.channelz.v1.Server.prototype.getData = function() {
  return /** @type{?proto.grpc.channelz.v1.ServerData} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ServerData, 2));
};


/** @param {?proto.grpc.channelz.v1.ServerData|undefined} value */
proto.grpc.channelz.v1.Server.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.Server.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Server.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SocketRef listen_socket = 3;
 * @return {!Array.<!proto.grpc.channelz.v1.SocketRef>}
 */
proto.grpc.channelz.v1.Server.prototype.getListenSocketList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SocketRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SocketRef, 3));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SocketRef>} value */
proto.grpc.channelz.v1.Server.prototype.setListenSocketList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SocketRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.Server.prototype.addListenSocket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grpc.channelz.v1.SocketRef, opt_index);
};


proto.grpc.channelz.v1.Server.prototype.clearListenSocketList = function() {
  this.setListenSocketList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.ServerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.ServerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.ServerData.displayName = 'proto.grpc.channelz.v1.ServerData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.ServerData.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.ServerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.ServerData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ServerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    trace: (f = msg.getTrace()) && proto.grpc.channelz.v1.ChannelTrace.toObject(includeInstance, f),
    callsStarted: jspb.Message.getFieldWithDefault(msg, 2, 0),
    callsSucceeded: jspb.Message.getFieldWithDefault(msg, 3, 0),
    callsFailed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastCallStartedTimestamp: (f = msg.getLastCallStartedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.ServerData}
 */
proto.grpc.channelz.v1.ServerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.ServerData;
  return proto.grpc.channelz.v1.ServerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.ServerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.ServerData}
 */
proto.grpc.channelz.v1.ServerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.ChannelTrace;
      reader.readMessage(value,proto.grpc.channelz.v1.ChannelTrace.deserializeBinaryFromReader);
      msg.setTrace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallsStarted(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallsSucceeded(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCallsFailed(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastCallStartedTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.ServerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.ServerData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.ServerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.ServerData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.ChannelTrace.serializeBinaryToWriter
    );
  }
  f = message.getCallsStarted();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCallsSucceeded();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCallsFailed();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastCallStartedTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelTrace trace = 1;
 * @return {?proto.grpc.channelz.v1.ChannelTrace}
 */
proto.grpc.channelz.v1.ServerData.prototype.getTrace = function() {
  return /** @type{?proto.grpc.channelz.v1.ChannelTrace} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.ChannelTrace, 1));
};


/** @param {?proto.grpc.channelz.v1.ChannelTrace|undefined} value */
proto.grpc.channelz.v1.ServerData.prototype.setTrace = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.ServerData.prototype.clearTrace = function() {
  this.setTrace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ServerData.prototype.hasTrace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 calls_started = 2;
 * @return {number}
 */
proto.grpc.channelz.v1.ServerData.prototype.getCallsStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ServerData.prototype.setCallsStarted = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 calls_succeeded = 3;
 * @return {number}
 */
proto.grpc.channelz.v1.ServerData.prototype.getCallsSucceeded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ServerData.prototype.setCallsSucceeded = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 calls_failed = 4;
 * @return {number}
 */
proto.grpc.channelz.v1.ServerData.prototype.getCallsFailed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.ServerData.prototype.setCallsFailed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp last_call_started_timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.ServerData.prototype.getLastCallStartedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.ServerData.prototype.setLastCallStartedTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.grpc.channelz.v1.ServerData.prototype.clearLastCallStartedTimestamp = function() {
  this.setLastCallStartedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.ServerData.prototype.hasLastCallStartedTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Socket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.Socket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Socket.displayName = 'proto.grpc.channelz.v1.Socket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Socket.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Socket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Socket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Socket.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.grpc.channelz.v1.SocketRef.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.grpc.channelz.v1.SocketData.toObject(includeInstance, f),
    local: (f = msg.getLocal()) && proto.grpc.channelz.v1.Address.toObject(includeInstance, f),
    remote: (f = msg.getRemote()) && proto.grpc.channelz.v1.Address.toObject(includeInstance, f),
    security: (f = msg.getSecurity()) && proto.grpc.channelz.v1.Security.toObject(includeInstance, f),
    remoteName: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Socket}
 */
proto.grpc.channelz.v1.Socket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Socket;
  return proto.grpc.channelz.v1.Socket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Socket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Socket}
 */
proto.grpc.channelz.v1.Socket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.SocketRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new proto.grpc.channelz.v1.SocketData;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.Address;
      reader.readMessage(value,proto.grpc.channelz.v1.Address.deserializeBinaryFromReader);
      msg.setLocal(value);
      break;
    case 4:
      var value = new proto.grpc.channelz.v1.Address;
      reader.readMessage(value,proto.grpc.channelz.v1.Address.deserializeBinaryFromReader);
      msg.setRemote(value);
      break;
    case 5:
      var value = new proto.grpc.channelz.v1.Security;
      reader.readMessage(value,proto.grpc.channelz.v1.Security.deserializeBinaryFromReader);
      msg.setSecurity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Socket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Socket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Socket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Socket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.channelz.v1.SocketData.serializeBinaryToWriter
    );
  }
  f = message.getLocal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.channelz.v1.Address.serializeBinaryToWriter
    );
  }
  f = message.getRemote();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.grpc.channelz.v1.Address.serializeBinaryToWriter
    );
  }
  f = message.getSecurity();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.grpc.channelz.v1.Security.serializeBinaryToWriter
    );
  }
  f = message.getRemoteName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional SocketRef ref = 1;
 * @return {?proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.Socket.prototype.getRef = function() {
  return /** @type{?proto.grpc.channelz.v1.SocketRef} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.SocketRef, 1));
};


/** @param {?proto.grpc.channelz.v1.SocketRef|undefined} value */
proto.grpc.channelz.v1.Socket.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.Socket.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Socket.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SocketData data = 2;
 * @return {?proto.grpc.channelz.v1.SocketData}
 */
proto.grpc.channelz.v1.Socket.prototype.getData = function() {
  return /** @type{?proto.grpc.channelz.v1.SocketData} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.SocketData, 2));
};


/** @param {?proto.grpc.channelz.v1.SocketData|undefined} value */
proto.grpc.channelz.v1.Socket.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.Socket.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Socket.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Address local = 3;
 * @return {?proto.grpc.channelz.v1.Address}
 */
proto.grpc.channelz.v1.Socket.prototype.getLocal = function() {
  return /** @type{?proto.grpc.channelz.v1.Address} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Address, 3));
};


/** @param {?proto.grpc.channelz.v1.Address|undefined} value */
proto.grpc.channelz.v1.Socket.prototype.setLocal = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.grpc.channelz.v1.Socket.prototype.clearLocal = function() {
  this.setLocal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Socket.prototype.hasLocal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Address remote = 4;
 * @return {?proto.grpc.channelz.v1.Address}
 */
proto.grpc.channelz.v1.Socket.prototype.getRemote = function() {
  return /** @type{?proto.grpc.channelz.v1.Address} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Address, 4));
};


/** @param {?proto.grpc.channelz.v1.Address|undefined} value */
proto.grpc.channelz.v1.Socket.prototype.setRemote = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.grpc.channelz.v1.Socket.prototype.clearRemote = function() {
  this.setRemote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Socket.prototype.hasRemote = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Security security = 5;
 * @return {?proto.grpc.channelz.v1.Security}
 */
proto.grpc.channelz.v1.Socket.prototype.getSecurity = function() {
  return /** @type{?proto.grpc.channelz.v1.Security} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Security, 5));
};


/** @param {?proto.grpc.channelz.v1.Security|undefined} value */
proto.grpc.channelz.v1.Socket.prototype.setSecurity = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.grpc.channelz.v1.Socket.prototype.clearSecurity = function() {
  this.setSecurity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Socket.prototype.hasSecurity = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string remote_name = 6;
 * @return {string}
 */
proto.grpc.channelz.v1.Socket.prototype.getRemoteName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.Socket.prototype.setRemoteName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SocketData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.SocketData.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.SocketData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SocketData.displayName = 'proto.grpc.channelz.v1.SocketData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.SocketData.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SocketData.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SocketData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SocketData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketData.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamsStarted: jspb.Message.getFieldWithDefault(msg, 1, 0),
    streamsSucceeded: jspb.Message.getFieldWithDefault(msg, 2, 0),
    streamsFailed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    messagesSent: jspb.Message.getFieldWithDefault(msg, 4, 0),
    messagesReceived: jspb.Message.getFieldWithDefault(msg, 5, 0),
    keepAlivesSent: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastLocalStreamCreatedTimestamp: (f = msg.getLastLocalStreamCreatedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastRemoteStreamCreatedTimestamp: (f = msg.getLastRemoteStreamCreatedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastMessageSentTimestamp: (f = msg.getLastMessageSentTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastMessageReceivedTimestamp: (f = msg.getLastMessageReceivedTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    localFlowControlWindow: (f = msg.getLocalFlowControlWindow()) && google_protobuf_wrappers_pb.Int64Value.toObject(includeInstance, f),
    remoteFlowControlWindow: (f = msg.getRemoteFlowControlWindow()) && google_protobuf_wrappers_pb.Int64Value.toObject(includeInstance, f),
    optionList: jspb.Message.toObjectList(msg.getOptionList(),
    proto.grpc.channelz.v1.SocketOption.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SocketData}
 */
proto.grpc.channelz.v1.SocketData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SocketData;
  return proto.grpc.channelz.v1.SocketData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SocketData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SocketData}
 */
proto.grpc.channelz.v1.SocketData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStreamsStarted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStreamsSucceeded(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStreamsFailed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagesSent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagesReceived(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKeepAlivesSent(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastLocalStreamCreatedTimestamp(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastRemoteStreamCreatedTimestamp(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastMessageSentTimestamp(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastMessageReceivedTimestamp(value);
      break;
    case 11:
      var value = new google_protobuf_wrappers_pb.Int64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int64Value.deserializeBinaryFromReader);
      msg.setLocalFlowControlWindow(value);
      break;
    case 12:
      var value = new google_protobuf_wrappers_pb.Int64Value;
      reader.readMessage(value,google_protobuf_wrappers_pb.Int64Value.deserializeBinaryFromReader);
      msg.setRemoteFlowControlWindow(value);
      break;
    case 13:
      var value = new proto.grpc.channelz.v1.SocketOption;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketOption.deserializeBinaryFromReader);
      msg.addOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SocketData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SocketData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SocketData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamsStarted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStreamsSucceeded();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStreamsFailed();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMessagesSent();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMessagesReceived();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getKeepAlivesSent();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLastLocalStreamCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastRemoteStreamCreatedTimestamp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastMessageSentTimestamp();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastMessageReceivedTimestamp();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocalFlowControlWindow();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_wrappers_pb.Int64Value.serializeBinaryToWriter
    );
  }
  f = message.getRemoteFlowControlWindow();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_wrappers_pb.Int64Value.serializeBinaryToWriter
    );
  }
  f = message.getOptionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.grpc.channelz.v1.SocketOption.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 streams_started = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketData.prototype.getStreamsStarted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketData.prototype.setStreamsStarted = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 streams_succeeded = 2;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketData.prototype.getStreamsSucceeded = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketData.prototype.setStreamsSucceeded = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 streams_failed = 3;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketData.prototype.getStreamsFailed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketData.prototype.setStreamsFailed = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 messages_sent = 4;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketData.prototype.getMessagesSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketData.prototype.setMessagesSent = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 messages_received = 5;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketData.prototype.getMessagesReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketData.prototype.setMessagesReceived = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 keep_alives_sent = 6;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketData.prototype.getKeepAlivesSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketData.prototype.setKeepAlivesSent = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp last_local_stream_created_timestamp = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.SocketData.prototype.getLastLocalStreamCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.SocketData.prototype.setLastLocalStreamCreatedTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.grpc.channelz.v1.SocketData.prototype.clearLastLocalStreamCreatedTimestamp = function() {
  this.setLastLocalStreamCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketData.prototype.hasLastLocalStreamCreatedTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp last_remote_stream_created_timestamp = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.SocketData.prototype.getLastRemoteStreamCreatedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.SocketData.prototype.setLastRemoteStreamCreatedTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.grpc.channelz.v1.SocketData.prototype.clearLastRemoteStreamCreatedTimestamp = function() {
  this.setLastRemoteStreamCreatedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketData.prototype.hasLastRemoteStreamCreatedTimestamp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp last_message_sent_timestamp = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.SocketData.prototype.getLastMessageSentTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.SocketData.prototype.setLastMessageSentTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.grpc.channelz.v1.SocketData.prototype.clearLastMessageSentTimestamp = function() {
  this.setLastMessageSentTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketData.prototype.hasLastMessageSentTimestamp = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional google.protobuf.Timestamp last_message_received_timestamp = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.grpc.channelz.v1.SocketData.prototype.getLastMessageReceivedTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.grpc.channelz.v1.SocketData.prototype.setLastMessageReceivedTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.grpc.channelz.v1.SocketData.prototype.clearLastMessageReceivedTimestamp = function() {
  this.setLastMessageReceivedTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketData.prototype.hasLastMessageReceivedTimestamp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Int64Value local_flow_control_window = 11;
 * @return {?proto.google.protobuf.Int64Value}
 */
proto.grpc.channelz.v1.SocketData.prototype.getLocalFlowControlWindow = function() {
  return /** @type{?proto.google.protobuf.Int64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int64Value, 11));
};


/** @param {?proto.google.protobuf.Int64Value|undefined} value */
proto.grpc.channelz.v1.SocketData.prototype.setLocalFlowControlWindow = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.grpc.channelz.v1.SocketData.prototype.clearLocalFlowControlWindow = function() {
  this.setLocalFlowControlWindow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketData.prototype.hasLocalFlowControlWindow = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional google.protobuf.Int64Value remote_flow_control_window = 12;
 * @return {?proto.google.protobuf.Int64Value}
 */
proto.grpc.channelz.v1.SocketData.prototype.getRemoteFlowControlWindow = function() {
  return /** @type{?proto.google.protobuf.Int64Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.Int64Value, 12));
};


/** @param {?proto.google.protobuf.Int64Value|undefined} value */
proto.grpc.channelz.v1.SocketData.prototype.setRemoteFlowControlWindow = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.grpc.channelz.v1.SocketData.prototype.clearRemoteFlowControlWindow = function() {
  this.setRemoteFlowControlWindow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketData.prototype.hasRemoteFlowControlWindow = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated SocketOption option = 13;
 * @return {!Array.<!proto.grpc.channelz.v1.SocketOption>}
 */
proto.grpc.channelz.v1.SocketData.prototype.getOptionList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SocketOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SocketOption, 13));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SocketOption>} value */
proto.grpc.channelz.v1.SocketData.prototype.setOptionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SocketOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SocketOption}
 */
proto.grpc.channelz.v1.SocketData.prototype.addOption = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.grpc.channelz.v1.SocketOption, opt_index);
};


proto.grpc.channelz.v1.SocketData.prototype.clearOptionList = function() {
  this.setOptionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.channelz.v1.Address.oneofGroups_);
};
goog.inherits(proto.grpc.channelz.v1.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Address.displayName = 'proto.grpc.channelz.v1.Address';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.channelz.v1.Address.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.grpc.channelz.v1.Address.AddressCase = {
  ADDRESS_NOT_SET: 0,
  TCPIP_ADDRESS: 1,
  UDS_ADDRESS: 2,
  OTHER_ADDRESS: 3
};

/**
 * @return {proto.grpc.channelz.v1.Address.AddressCase}
 */
proto.grpc.channelz.v1.Address.prototype.getAddressCase = function() {
  return /** @type {proto.grpc.channelz.v1.Address.AddressCase} */(jspb.Message.computeOneofCase(this, proto.grpc.channelz.v1.Address.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    tcpipAddress: (f = msg.getTcpipAddress()) && proto.grpc.channelz.v1.Address.TcpIpAddress.toObject(includeInstance, f),
    udsAddress: (f = msg.getUdsAddress()) && proto.grpc.channelz.v1.Address.UdsAddress.toObject(includeInstance, f),
    otherAddress: (f = msg.getOtherAddress()) && proto.grpc.channelz.v1.Address.OtherAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Address}
 */
proto.grpc.channelz.v1.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Address;
  return proto.grpc.channelz.v1.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Address}
 */
proto.grpc.channelz.v1.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Address.TcpIpAddress;
      reader.readMessage(value,proto.grpc.channelz.v1.Address.TcpIpAddress.deserializeBinaryFromReader);
      msg.setTcpipAddress(value);
      break;
    case 2:
      var value = new proto.grpc.channelz.v1.Address.UdsAddress;
      reader.readMessage(value,proto.grpc.channelz.v1.Address.UdsAddress.deserializeBinaryFromReader);
      msg.setUdsAddress(value);
      break;
    case 3:
      var value = new proto.grpc.channelz.v1.Address.OtherAddress;
      reader.readMessage(value,proto.grpc.channelz.v1.Address.OtherAddress.deserializeBinaryFromReader);
      msg.setOtherAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTcpipAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.Address.TcpIpAddress.serializeBinaryToWriter
    );
  }
  f = message.getUdsAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.channelz.v1.Address.UdsAddress.serializeBinaryToWriter
    );
  }
  f = message.getOtherAddress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.channelz.v1.Address.OtherAddress.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Address.TcpIpAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.Address.TcpIpAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Address.TcpIpAddress.displayName = 'proto.grpc.channelz.v1.Address.TcpIpAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Address.TcpIpAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Address.TcpIpAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipAddress: msg.getIpAddress_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Address.TcpIpAddress}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Address.TcpIpAddress;
  return proto.grpc.channelz.v1.Address.TcpIpAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Address.TcpIpAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Address.TcpIpAddress}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Address.TcpIpAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Address.TcpIpAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes ip_address = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ip_address = 1;
 * This is a type-conversion wrapper around `getIpAddress()`
 * @return {string}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.getIpAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpAddress()));
};


/**
 * optional bytes ip_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpAddress()`
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.getIpAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpAddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.setIpAddress = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.Address.TcpIpAddress.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Address.UdsAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.Address.UdsAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Address.UdsAddress.displayName = 'proto.grpc.channelz.v1.Address.UdsAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Address.UdsAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Address.UdsAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Address.UdsAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.UdsAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Address.UdsAddress}
 */
proto.grpc.channelz.v1.Address.UdsAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Address.UdsAddress;
  return proto.grpc.channelz.v1.Address.UdsAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Address.UdsAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Address.UdsAddress}
 */
proto.grpc.channelz.v1.Address.UdsAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Address.UdsAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Address.UdsAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Address.UdsAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.UdsAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.Address.UdsAddress.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.Address.UdsAddress.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Address.OtherAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.Address.OtherAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Address.OtherAddress.displayName = 'proto.grpc.channelz.v1.Address.OtherAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Address.OtherAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Address.OtherAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.OtherAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Address.OtherAddress}
 */
proto.grpc.channelz.v1.Address.OtherAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Address.OtherAddress;
  return proto.grpc.channelz.v1.Address.OtherAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Address.OtherAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Address.OtherAddress}
 */
proto.grpc.channelz.v1.Address.OtherAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Address.OtherAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Address.OtherAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Address.OtherAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any value = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.Address.OtherAddress.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Address.OtherAddress.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TcpIpAddress tcpip_address = 1;
 * @return {?proto.grpc.channelz.v1.Address.TcpIpAddress}
 */
proto.grpc.channelz.v1.Address.prototype.getTcpipAddress = function() {
  return /** @type{?proto.grpc.channelz.v1.Address.TcpIpAddress} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Address.TcpIpAddress, 1));
};


/** @param {?proto.grpc.channelz.v1.Address.TcpIpAddress|undefined} value */
proto.grpc.channelz.v1.Address.prototype.setTcpipAddress = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpc.channelz.v1.Address.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Address.prototype.clearTcpipAddress = function() {
  this.setTcpipAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Address.prototype.hasTcpipAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UdsAddress uds_address = 2;
 * @return {?proto.grpc.channelz.v1.Address.UdsAddress}
 */
proto.grpc.channelz.v1.Address.prototype.getUdsAddress = function() {
  return /** @type{?proto.grpc.channelz.v1.Address.UdsAddress} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Address.UdsAddress, 2));
};


/** @param {?proto.grpc.channelz.v1.Address.UdsAddress|undefined} value */
proto.grpc.channelz.v1.Address.prototype.setUdsAddress = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpc.channelz.v1.Address.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Address.prototype.clearUdsAddress = function() {
  this.setUdsAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Address.prototype.hasUdsAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OtherAddress other_address = 3;
 * @return {?proto.grpc.channelz.v1.Address.OtherAddress}
 */
proto.grpc.channelz.v1.Address.prototype.getOtherAddress = function() {
  return /** @type{?proto.grpc.channelz.v1.Address.OtherAddress} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Address.OtherAddress, 3));
};


/** @param {?proto.grpc.channelz.v1.Address.OtherAddress|undefined} value */
proto.grpc.channelz.v1.Address.prototype.setOtherAddress = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.grpc.channelz.v1.Address.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Address.prototype.clearOtherAddress = function() {
  this.setOtherAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Address.prototype.hasOtherAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Security = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.channelz.v1.Security.oneofGroups_);
};
goog.inherits(proto.grpc.channelz.v1.Security, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Security.displayName = 'proto.grpc.channelz.v1.Security';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.channelz.v1.Security.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpc.channelz.v1.Security.ModelCase = {
  MODEL_NOT_SET: 0,
  TLS: 1,
  OTHER: 2
};

/**
 * @return {proto.grpc.channelz.v1.Security.ModelCase}
 */
proto.grpc.channelz.v1.Security.prototype.getModelCase = function() {
  return /** @type {proto.grpc.channelz.v1.Security.ModelCase} */(jspb.Message.computeOneofCase(this, proto.grpc.channelz.v1.Security.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Security.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Security.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Security} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Security.toObject = function(includeInstance, msg) {
  var f, obj = {
    tls: (f = msg.getTls()) && proto.grpc.channelz.v1.Security.Tls.toObject(includeInstance, f),
    other: (f = msg.getOther()) && proto.grpc.channelz.v1.Security.OtherSecurity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Security}
 */
proto.grpc.channelz.v1.Security.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Security;
  return proto.grpc.channelz.v1.Security.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Security} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Security}
 */
proto.grpc.channelz.v1.Security.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Security.Tls;
      reader.readMessage(value,proto.grpc.channelz.v1.Security.Tls.deserializeBinaryFromReader);
      msg.setTls(value);
      break;
    case 2:
      var value = new proto.grpc.channelz.v1.Security.OtherSecurity;
      reader.readMessage(value,proto.grpc.channelz.v1.Security.OtherSecurity.deserializeBinaryFromReader);
      msg.setOther(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Security.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Security.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Security} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Security.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTls();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.Security.Tls.serializeBinaryToWriter
    );
  }
  f = message.getOther();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.channelz.v1.Security.OtherSecurity.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Security.Tls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.channelz.v1.Security.Tls.oneofGroups_);
};
goog.inherits(proto.grpc.channelz.v1.Security.Tls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Security.Tls.displayName = 'proto.grpc.channelz.v1.Security.Tls';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.channelz.v1.Security.Tls.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpc.channelz.v1.Security.Tls.CipherSuiteCase = {
  CIPHER_SUITE_NOT_SET: 0,
  STANDARD_NAME: 1,
  OTHER_NAME: 2
};

/**
 * @return {proto.grpc.channelz.v1.Security.Tls.CipherSuiteCase}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getCipherSuiteCase = function() {
  return /** @type {proto.grpc.channelz.v1.Security.Tls.CipherSuiteCase} */(jspb.Message.computeOneofCase(this, proto.grpc.channelz.v1.Security.Tls.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Security.Tls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Security.Tls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Security.Tls.toObject = function(includeInstance, msg) {
  var f, obj = {
    standardName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    otherName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    localCertificate: msg.getLocalCertificate_asB64(),
    remoteCertificate: msg.getRemoteCertificate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Security.Tls}
 */
proto.grpc.channelz.v1.Security.Tls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Security.Tls;
  return proto.grpc.channelz.v1.Security.Tls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Security.Tls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Security.Tls}
 */
proto.grpc.channelz.v1.Security.Tls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStandardName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocalCertificate(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRemoteCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Security.Tls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Security.Tls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Security.Tls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocalCertificate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRemoteCertificate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string standard_name = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getStandardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.Security.Tls.prototype.setStandardName = function(value) {
  jspb.Message.setOneofField(this, 1, proto.grpc.channelz.v1.Security.Tls.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Security.Tls.prototype.clearStandardName = function() {
  jspb.Message.setOneofField(this, 1, proto.grpc.channelz.v1.Security.Tls.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.hasStandardName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string other_name = 2;
 * @return {string}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getOtherName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.Security.Tls.prototype.setOtherName = function(value) {
  jspb.Message.setOneofField(this, 2, proto.grpc.channelz.v1.Security.Tls.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Security.Tls.prototype.clearOtherName = function() {
  jspb.Message.setOneofField(this, 2, proto.grpc.channelz.v1.Security.Tls.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.hasOtherName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes local_certificate = 3;
 * @return {string}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getLocalCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes local_certificate = 3;
 * This is a type-conversion wrapper around `getLocalCertificate()`
 * @return {string}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getLocalCertificate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocalCertificate()));
};


/**
 * optional bytes local_certificate = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocalCertificate()`
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getLocalCertificate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocalCertificate()));
};


/** @param {!(string|Uint8Array)} value */
proto.grpc.channelz.v1.Security.Tls.prototype.setLocalCertificate = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes remote_certificate = 4;
 * @return {string}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getRemoteCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes remote_certificate = 4;
 * This is a type-conversion wrapper around `getRemoteCertificate()`
 * @return {string}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getRemoteCertificate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRemoteCertificate()));
};


/**
 * optional bytes remote_certificate = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRemoteCertificate()`
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Security.Tls.prototype.getRemoteCertificate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRemoteCertificate()));
};


/** @param {!(string|Uint8Array)} value */
proto.grpc.channelz.v1.Security.Tls.prototype.setRemoteCertificate = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.Security.OtherSecurity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.Security.OtherSecurity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.Security.OtherSecurity.displayName = 'proto.grpc.channelz.v1.Security.OtherSecurity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.Security.OtherSecurity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.Security.OtherSecurity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Security.OtherSecurity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.Security.OtherSecurity}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.Security.OtherSecurity;
  return proto.grpc.channelz.v1.Security.OtherSecurity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.Security.OtherSecurity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.Security.OtherSecurity}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.Security.OtherSecurity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.Security.OtherSecurity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.Security.OtherSecurity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any value = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.Security.OtherSecurity.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Security.OtherSecurity.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Tls tls = 1;
 * @return {?proto.grpc.channelz.v1.Security.Tls}
 */
proto.grpc.channelz.v1.Security.prototype.getTls = function() {
  return /** @type{?proto.grpc.channelz.v1.Security.Tls} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Security.Tls, 1));
};


/** @param {?proto.grpc.channelz.v1.Security.Tls|undefined} value */
proto.grpc.channelz.v1.Security.prototype.setTls = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpc.channelz.v1.Security.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Security.prototype.clearTls = function() {
  this.setTls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Security.prototype.hasTls = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OtherSecurity other = 2;
 * @return {?proto.grpc.channelz.v1.Security.OtherSecurity}
 */
proto.grpc.channelz.v1.Security.prototype.getOther = function() {
  return /** @type{?proto.grpc.channelz.v1.Security.OtherSecurity} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Security.OtherSecurity, 2));
};


/** @param {?proto.grpc.channelz.v1.Security.OtherSecurity|undefined} value */
proto.grpc.channelz.v1.Security.prototype.setOther = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpc.channelz.v1.Security.oneofGroups_[0], value);
};


proto.grpc.channelz.v1.Security.prototype.clearOther = function() {
  this.setOther(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.Security.prototype.hasOther = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SocketOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.SocketOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SocketOption.displayName = 'proto.grpc.channelz.v1.SocketOption';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SocketOption.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SocketOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SocketOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    additional: (f = msg.getAdditional()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SocketOption}
 */
proto.grpc.channelz.v1.SocketOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SocketOption;
  return proto.grpc.channelz.v1.SocketOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SocketOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SocketOption}
 */
proto.grpc.channelz.v1.SocketOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setAdditional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SocketOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SocketOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SocketOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdditional();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpc.channelz.v1.SocketOption.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.SocketOption.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.grpc.channelz.v1.SocketOption.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpc.channelz.v1.SocketOption.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any additional = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.grpc.channelz.v1.SocketOption.prototype.getAdditional = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.grpc.channelz.v1.SocketOption.prototype.setAdditional = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.grpc.channelz.v1.SocketOption.prototype.clearAdditional = function() {
  this.setAdditional(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketOption.prototype.hasAdditional = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SocketOptionTimeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.SocketOptionTimeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SocketOptionTimeout.displayName = 'proto.grpc.channelz.v1.SocketOptionTimeout';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SocketOptionTimeout.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SocketOptionTimeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SocketOptionTimeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOptionTimeout.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SocketOptionTimeout}
 */
proto.grpc.channelz.v1.SocketOptionTimeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SocketOptionTimeout;
  return proto.grpc.channelz.v1.SocketOptionTimeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SocketOptionTimeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SocketOptionTimeout}
 */
proto.grpc.channelz.v1.SocketOptionTimeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SocketOptionTimeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SocketOptionTimeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SocketOptionTimeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOptionTimeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration duration = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.grpc.channelz.v1.SocketOptionTimeout.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.grpc.channelz.v1.SocketOptionTimeout.prototype.setDuration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.SocketOptionTimeout.prototype.clearDuration = function() {
  this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketOptionTimeout.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SocketOptionLinger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.SocketOptionLinger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SocketOptionLinger.displayName = 'proto.grpc.channelz.v1.SocketOptionLinger';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SocketOptionLinger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SocketOptionLinger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOptionLinger.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SocketOptionLinger}
 */
proto.grpc.channelz.v1.SocketOptionLinger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SocketOptionLinger;
  return proto.grpc.channelz.v1.SocketOptionLinger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SocketOptionLinger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SocketOptionLinger}
 */
proto.grpc.channelz.v1.SocketOptionLinger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SocketOptionLinger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SocketOptionLinger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOptionLinger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional google.protobuf.Duration duration = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.setDuration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.channelz.v1.SocketOptionLinger.prototype.clearDuration = function() {
  this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.SocketOptionLinger.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.SocketOptionTcpInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.SocketOptionTcpInfo.displayName = 'proto.grpc.channelz.v1.SocketOptionTcpInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.SocketOptionTcpInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.SocketOptionTcpInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tcpiState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tcpiCaState: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tcpiRetransmits: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tcpiProbes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tcpiBackoff: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tcpiOptions: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tcpiSndWscale: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tcpiRcvWscale: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tcpiRto: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tcpiAto: jspb.Message.getFieldWithDefault(msg, 10, 0),
    tcpiSndMss: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tcpiRcvMss: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tcpiUnacked: jspb.Message.getFieldWithDefault(msg, 13, 0),
    tcpiSacked: jspb.Message.getFieldWithDefault(msg, 14, 0),
    tcpiLost: jspb.Message.getFieldWithDefault(msg, 15, 0),
    tcpiRetrans: jspb.Message.getFieldWithDefault(msg, 16, 0),
    tcpiFackets: jspb.Message.getFieldWithDefault(msg, 17, 0),
    tcpiLastDataSent: jspb.Message.getFieldWithDefault(msg, 18, 0),
    tcpiLastAckSent: jspb.Message.getFieldWithDefault(msg, 19, 0),
    tcpiLastDataRecv: jspb.Message.getFieldWithDefault(msg, 20, 0),
    tcpiLastAckRecv: jspb.Message.getFieldWithDefault(msg, 21, 0),
    tcpiPmtu: jspb.Message.getFieldWithDefault(msg, 22, 0),
    tcpiRcvSsthresh: jspb.Message.getFieldWithDefault(msg, 23, 0),
    tcpiRtt: jspb.Message.getFieldWithDefault(msg, 24, 0),
    tcpiRttvar: jspb.Message.getFieldWithDefault(msg, 25, 0),
    tcpiSndSsthresh: jspb.Message.getFieldWithDefault(msg, 26, 0),
    tcpiSndCwnd: jspb.Message.getFieldWithDefault(msg, 27, 0),
    tcpiAdvmss: jspb.Message.getFieldWithDefault(msg, 28, 0),
    tcpiReordering: jspb.Message.getFieldWithDefault(msg, 29, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.SocketOptionTcpInfo}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.SocketOptionTcpInfo;
  return proto.grpc.channelz.v1.SocketOptionTcpInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.SocketOptionTcpInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.SocketOptionTcpInfo}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiState(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiCaState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRetransmits(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiProbes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiBackoff(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiOptions(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiSndWscale(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRcvWscale(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRto(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiAto(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiSndMss(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRcvMss(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiUnacked(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiSacked(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiLost(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRetrans(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiFackets(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiLastDataSent(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiLastAckSent(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiLastDataRecv(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiLastAckRecv(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiPmtu(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRcvSsthresh(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRtt(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiRttvar(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiSndSsthresh(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiSndCwnd(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiAdvmss(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpiReordering(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.SocketOptionTcpInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.SocketOptionTcpInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTcpiState();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTcpiCaState();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTcpiRetransmits();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTcpiProbes();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTcpiBackoff();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTcpiOptions();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTcpiSndWscale();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTcpiRcvWscale();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getTcpiRto();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTcpiAto();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getTcpiSndMss();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getTcpiRcvMss();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getTcpiUnacked();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getTcpiSacked();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getTcpiLost();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getTcpiRetrans();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getTcpiFackets();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getTcpiLastDataSent();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getTcpiLastAckSent();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getTcpiLastDataRecv();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getTcpiLastAckRecv();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getTcpiPmtu();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getTcpiRcvSsthresh();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getTcpiRtt();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = message.getTcpiRttvar();
  if (f !== 0) {
    writer.writeUint32(
      25,
      f
    );
  }
  f = message.getTcpiSndSsthresh();
  if (f !== 0) {
    writer.writeUint32(
      26,
      f
    );
  }
  f = message.getTcpiSndCwnd();
  if (f !== 0) {
    writer.writeUint32(
      27,
      f
    );
  }
  f = message.getTcpiAdvmss();
  if (f !== 0) {
    writer.writeUint32(
      28,
      f
    );
  }
  f = message.getTcpiReordering();
  if (f !== 0) {
    writer.writeUint32(
      29,
      f
    );
  }
};


/**
 * optional uint32 tcpi_state = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiState = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 tcpi_ca_state = 2;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiCaState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiCaState = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 tcpi_retransmits = 3;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRetransmits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRetransmits = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 tcpi_probes = 4;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiProbes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiProbes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 tcpi_backoff = 5;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiBackoff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiBackoff = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 tcpi_options = 6;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiOptions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiOptions = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 tcpi_snd_wscale = 7;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiSndWscale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiSndWscale = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 tcpi_rcv_wscale = 8;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRcvWscale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRcvWscale = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 tcpi_rto = 9;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRto = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 tcpi_ato = 10;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiAto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiAto = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 tcpi_snd_mss = 11;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiSndMss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiSndMss = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 tcpi_rcv_mss = 12;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRcvMss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRcvMss = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 tcpi_unacked = 13;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiUnacked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiUnacked = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 tcpi_sacked = 14;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiSacked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiSacked = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 tcpi_lost = 15;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiLost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiLost = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint32 tcpi_retrans = 16;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRetrans = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRetrans = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint32 tcpi_fackets = 17;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiFackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiFackets = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint32 tcpi_last_data_sent = 18;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiLastDataSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiLastDataSent = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint32 tcpi_last_ack_sent = 19;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiLastAckSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiLastAckSent = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint32 tcpi_last_data_recv = 20;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiLastDataRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiLastDataRecv = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional uint32 tcpi_last_ack_recv = 21;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiLastAckRecv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiLastAckRecv = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 tcpi_pmtu = 22;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiPmtu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiPmtu = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint32 tcpi_rcv_ssthresh = 23;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRcvSsthresh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRcvSsthresh = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint32 tcpi_rtt = 24;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRtt = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional uint32 tcpi_rttvar = 25;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiRttvar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiRttvar = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional uint32 tcpi_snd_ssthresh = 26;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiSndSsthresh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiSndSsthresh = function(value) {
  jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional uint32 tcpi_snd_cwnd = 27;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiSndCwnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiSndCwnd = function(value) {
  jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional uint32 tcpi_advmss = 28;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiAdvmss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiAdvmss = function(value) {
  jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional uint32 tcpi_reordering = 29;
 * @return {number}
 */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.getTcpiReordering = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.SocketOptionTcpInfo.prototype.setTcpiReordering = function(value) {
  jspb.Message.setProto3IntField(this, 29, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetTopChannelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetTopChannelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetTopChannelsRequest.displayName = 'proto.grpc.channelz.v1.GetTopChannelsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetTopChannelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetTopChannelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startChannelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetTopChannelsRequest}
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetTopChannelsRequest;
  return proto.grpc.channelz.v1.GetTopChannelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetTopChannelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetTopChannelsRequest}
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetTopChannelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetTopChannelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartChannelId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 start_channel_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.GetTopChannelsRequest.prototype.getStartChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetTopChannelsRequest.prototype.setStartChannelId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetTopChannelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.GetTopChannelsResponse.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.GetTopChannelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetTopChannelsResponse.displayName = 'proto.grpc.channelz.v1.GetTopChannelsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetTopChannelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetTopChannelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelList: jspb.Message.toObjectList(msg.getChannelList(),
    proto.grpc.channelz.v1.Channel.toObject, includeInstance),
    end: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetTopChannelsResponse}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetTopChannelsResponse;
  return proto.grpc.channelz.v1.GetTopChannelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetTopChannelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetTopChannelsResponse}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Channel;
      reader.readMessage(value,proto.grpc.channelz.v1.Channel.deserializeBinaryFromReader);
      msg.addChannel(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetTopChannelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetTopChannelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.channelz.v1.Channel.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated Channel channel = 1;
 * @return {!Array.<!proto.grpc.channelz.v1.Channel>}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.getChannelList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.Channel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.Channel, 1));
};


/** @param {!Array.<!proto.grpc.channelz.v1.Channel>} value */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.setChannelList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.channelz.v1.Channel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.Channel}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.addChannel = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.channelz.v1.Channel, opt_index);
};


proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.clearChannelList = function() {
  this.setChannelList([]);
};


/**
 * optional bool end = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.getEnd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.grpc.channelz.v1.GetTopChannelsResponse.prototype.setEnd = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetServersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetServersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetServersRequest.displayName = 'proto.grpc.channelz.v1.GetServersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetServersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetServersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetServersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startServerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetServersRequest}
 */
proto.grpc.channelz.v1.GetServersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetServersRequest;
  return proto.grpc.channelz.v1.GetServersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetServersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetServersRequest}
 */
proto.grpc.channelz.v1.GetServersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartServerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetServersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetServersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetServersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartServerId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 start_server_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.GetServersRequest.prototype.getStartServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetServersRequest.prototype.setStartServerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetServersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.GetServersResponse.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.GetServersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetServersResponse.displayName = 'proto.grpc.channelz.v1.GetServersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.GetServersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetServersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetServersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetServersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverList: jspb.Message.toObjectList(msg.getServerList(),
    proto.grpc.channelz.v1.Server.toObject, includeInstance),
    end: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetServersResponse}
 */
proto.grpc.channelz.v1.GetServersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetServersResponse;
  return proto.grpc.channelz.v1.GetServersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetServersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetServersResponse}
 */
proto.grpc.channelz.v1.GetServersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Server;
      reader.readMessage(value,proto.grpc.channelz.v1.Server.deserializeBinaryFromReader);
      msg.addServer(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetServersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetServersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetServersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.channelz.v1.Server.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated Server server = 1;
 * @return {!Array.<!proto.grpc.channelz.v1.Server>}
 */
proto.grpc.channelz.v1.GetServersResponse.prototype.getServerList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.Server>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.Server, 1));
};


/** @param {!Array.<!proto.grpc.channelz.v1.Server>} value */
proto.grpc.channelz.v1.GetServersResponse.prototype.setServerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.channelz.v1.Server=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.Server}
 */
proto.grpc.channelz.v1.GetServersResponse.prototype.addServer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.channelz.v1.Server, opt_index);
};


proto.grpc.channelz.v1.GetServersResponse.prototype.clearServerList = function() {
  this.setServerList([]);
};


/**
 * optional bool end = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpc.channelz.v1.GetServersResponse.prototype.getEnd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.grpc.channelz.v1.GetServersResponse.prototype.setEnd = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetServerSocketsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetServerSocketsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetServerSocketsRequest.displayName = 'proto.grpc.channelz.v1.GetServerSocketsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetServerSocketsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetServerSocketsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startSocketId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetServerSocketsRequest}
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetServerSocketsRequest;
  return proto.grpc.channelz.v1.GetServerSocketsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetServerSocketsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetServerSocketsRequest}
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartSocketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetServerSocketsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetServerSocketsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStartSocketId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 server_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.prototype.getServerId< = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetServerSocketsRequest.prototype.setServerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 start_socket_id = 2;
 * @return {number}
 */
proto.grpc.channelz.v1.GetServerSocketsRequest.prototype.getStartSocketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetServerSocketsRequest.prototype.setStartSocketId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetServerSocketsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.channelz.v1.GetServerSocketsResponse.repeatedFields_, null);
};
goog.inherits(proto.grpc.channelz.v1.GetServerSocketsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetServerSocketsResponse.displayName = 'proto.grpc.channelz.v1.GetServerSocketsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetServerSocketsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetServerSocketsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketRefList: jspb.Message.toObjectList(msg.getSocketRefList(),
    proto.grpc.channelz.v1.SocketRef.toObject, includeInstance),
    end: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetServerSocketsResponse}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetServerSocketsResponse;
  return proto.grpc.channelz.v1.GetServerSocketsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetServerSocketsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetServerSocketsResponse}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.SocketRef;
      reader.readMessage(value,proto.grpc.channelz.v1.SocketRef.deserializeBinaryFromReader);
      msg.addSocketRef(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetServerSocketsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetServerSocketsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketRefList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.channelz.v1.SocketRef.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated SocketRef socket_ref = 1;
 * @return {!Array.<!proto.grpc.channelz.v1.SocketRef>}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.getSocketRefList = function() {
  return /** @type{!Array.<!proto.grpc.channelz.v1.SocketRef>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.channelz.v1.SocketRef, 1));
};


/** @param {!Array.<!proto.grpc.channelz.v1.SocketRef>} value */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.setSocketRefList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.channelz.v1.SocketRef=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.channelz.v1.SocketRef}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.addSocketRef = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.channelz.v1.SocketRef, opt_index);
};


proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.clearSocketRefList = function() {
  this.setSocketRefList([]);
};


/**
 * optional bool end = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.getEnd = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.grpc.channelz.v1.GetServerSocketsResponse.prototype.setEnd = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetChannelRequest.displayName = 'proto.grpc.channelz.v1.GetChannelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetChannelRequest}
 */
proto.grpc.channelz.v1.GetChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetChannelRequest;
  return proto.grpc.channelz.v1.GetChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetChannelRequest}
 */
proto.grpc.channelz.v1.GetChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 channel_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.GetChannelRequest.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetChannelRequest.prototype.setChannelId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetChannelResponse.displayName = 'proto.grpc.channelz.v1.GetChannelResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: (f = msg.getChannel()) && proto.grpc.channelz.v1.Channel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetChannelResponse}
 */
proto.grpc.channelz.v1.GetChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetChannelResponse;
  return proto.grpc.channelz.v1.GetChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetChannelResponse}
 */
proto.grpc.channelz.v1.GetChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Channel;
      reader.readMessage(value,proto.grpc.channelz.v1.Channel.deserializeBinaryFromReader);
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.Channel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Channel channel = 1;
 * @return {?proto.grpc.channelz.v1.Channel}
 */
proto.grpc.channelz.v1.GetChannelResponse.prototype.getChannel = function() {
  return /** @type{?proto.grpc.channelz.v1.Channel} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Channel, 1));
};


/** @param {?proto.grpc.channelz.v1.Channel|undefined} value */
proto.grpc.channelz.v1.GetChannelResponse.prototype.setChannel = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.GetChannelResponse.prototype.clearChannel = function() {
  this.setChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.GetChannelResponse.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetSubchannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetSubchannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetSubchannelRequest.displayName = 'proto.grpc.channelz.v1.GetSubchannelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetSubchannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetSubchannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetSubchannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSubchannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchannelId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetSubchannelRequest}
 */
proto.grpc.channelz.v1.GetSubchannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetSubchannelRequest;
  return proto.grpc.channelz.v1.GetSubchannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetSubchannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetSubchannelRequest}
 */
proto.grpc.channelz.v1.GetSubchannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSubchannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetSubchannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetSubchannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetSubchannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSubchannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchannelId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 subchannel_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.GetSubchannelRequest.prototype.getSubchannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetSubchannelRequest.prototype.setSubchannelId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetSubchannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetSubchannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetSubchannelResponse.displayName = 'proto.grpc.channelz.v1.GetSubchannelResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetSubchannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetSubchannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetSubchannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSubchannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchannel: (f = msg.getSubchannel()) && proto.grpc.channelz.v1.Subchannel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetSubchannelResponse}
 */
proto.grpc.channelz.v1.GetSubchannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetSubchannelResponse;
  return proto.grpc.channelz.v1.GetSubchannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetSubchannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetSubchannelResponse}
 */
proto.grpc.channelz.v1.GetSubchannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Subchannel;
      reader.readMessage(value,proto.grpc.channelz.v1.Subchannel.deserializeBinaryFromReader);
      msg.setSubchannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetSubchannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetSubchannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetSubchannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSubchannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.Subchannel.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subchannel subchannel = 1;
 * @return {?proto.grpc.channelz.v1.Subchannel}
 */
proto.grpc.channelz.v1.GetSubchannelResponse.prototype.getSubchannel = function() {
  return /** @type{?proto.grpc.channelz.v1.Subchannel} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Subchannel, 1));
};


/** @param {?proto.grpc.channelz.v1.Subchannel|undefined} value */
proto.grpc.channelz.v1.GetSubchannelResponse.prototype.setSubchannel = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.GetSubchannelResponse.prototype.clearSubchannel = function() {
  this.setSubchannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.GetSubchannelResponse.prototype.hasSubchannel = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetSocketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetSocketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetSocketRequest.displayName = 'proto.grpc.channelz.v1.GetSocketRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetSocketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetSocketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetSocketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSocketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    socketId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetSocketRequest}
 */
proto.grpc.channelz.v1.GetSocketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetSocketRequest;
  return proto.grpc.channelz.v1.GetSocketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetSocketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetSocketRequest}
 */
proto.grpc.channelz.v1.GetSocketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSocketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetSocketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetSocketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetSocketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSocketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocketId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 socket_id = 1;
 * @return {number}
 */
proto.grpc.channelz.v1.GetSocketRequest.prototype.getSocketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.channelz.v1.GetSocketRequest.prototype.setSocketId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.channelz.v1.GetSocketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.channelz.v1.GetSocketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.channelz.v1.GetSocketResponse.displayName = 'proto.grpc.channelz.v1.GetSocketResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.channelz.v1.GetSocketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.channelz.v1.GetSocketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.channelz.v1.GetSocketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSocketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    socket: (f = msg.getSocket()) && proto.grpc.channelz.v1.Socket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.channelz.v1.GetSocketResponse}
 */
proto.grpc.channelz.v1.GetSocketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.channelz.v1.GetSocketResponse;
  return proto.grpc.channelz.v1.GetSocketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.channelz.v1.GetSocketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.channelz.v1.GetSocketResponse}
 */
proto.grpc.channelz.v1.GetSocketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.channelz.v1.Socket;
      reader.readMessage(value,proto.grpc.channelz.v1.Socket.deserializeBinaryFromReader);
      msg.setSocket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.channelz.v1.GetSocketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.channelz.v1.GetSocketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.channelz.v1.GetSocketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.channelz.v1.GetSocketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSocket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.channelz.v1.Socket.serializeBinaryToWriter
    );
  }
};


/**
 * optional Socket socket = 1;
 * @return {?proto.grpc.channelz.v1.Socket}
 */
proto.grpc.channelz.v1.GetSocketResponse.prototype.getSocket = function() {
  return /** @type{?proto.grpc.channelz.v1.Socket} */ (
    jspb.Message.getWrapperField(this, proto.grpc.channelz.v1.Socket, 1));
};


/** @param {?proto.grpc.channelz.v1.Socket|undefined} value */
proto.grpc.channelz.v1.GetSocketResponse.prototype.setSocket = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.channelz.v1.GetSocketResponse.prototype.clearSocket = function() {
  this.setSocket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.channelz.v1.GetSocketResponse.prototype.hasSocket = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.grpc.channelz.v1);
